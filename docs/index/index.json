{"interfaceLanguages":{"swift":[{"children":[{"title":"Articles","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttnio-v5","title":"MQTT Version 5.0","type":"article"},{"path":"\/documentation\/mqttnio\/mqttnio-connections","title":"Connections","type":"article"},{"path":"\/documentation\/mqttnio\/mqttnio-aws","title":"AWS IoT","type":"article"},{"title":"Client","type":"groupMarker"},{"children":[{"title":"Creating a client","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/init(host:port:identifier:eventloopgroupprovider:logger:configuration:)","title":"init(host: String, port: Int?, identifier: String, eventLoopGroupProvider: NIOEventLoopGroupProvider, logger: Logger?, configuration: Configuration)","type":"init"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/init(version:disableping:keepaliveinterval:pinginterval:connecttimeout:timeout:maxretryattempts:username:password:usessl:usewebsockets:tlsconfiguration:sniservername:websocketurlpath:websocketmaxframesize:)","title":"init(version: Version, disablePing: Bool, keepAliveInterval: TimeAmount, pingInterval: TimeAmount?, connectTimeout: TimeAmount, timeout: TimeAmount?, maxRetryAttempts: Int, userName: String?, password: String?, useSSL: Bool, useWebSockets: Bool, tlsConfiguration: TLSConfigurationType?, sniServerName: String?, webSocketURLPath: String?, webSocketMaxFrameSize: Int)","type":"init"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/init(version:disableping:keepaliveinterval:pinginterval:connecttimeout:timeout:username:password:usessl:tlsconfiguration:sniservername:websocketconfiguration:)","title":"init(version: Version, disablePing: Bool, keepAliveInterval: TimeAmount, pingInterval: TimeAmount?, connectTimeout: TimeAmount, timeout: TimeAmount?, userName: String?, password: String?, useSSL: Bool, tlsConfiguration: TLSConfigurationType?, sniServerName: String?, webSocketConfiguration: WebSocketConfiguration)","type":"init"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/init(version:disableping:keepaliveinterval:pinginterval:connecttimeout:timeout:username:password:usessl:usewebsockets:tlsconfiguration:sniservername:websocketurlpath:websocketmaxframesize:)","title":"init(version: Version, disablePing: Bool, keepAliveInterval: TimeAmount, pingInterval: TimeAmount?, connectTimeout: TimeAmount, timeout: TimeAmount?, userName: String?, password: String?, useSSL: Bool, useWebSockets: Bool, tlsConfiguration: TLSConfigurationType?, sniServerName: String?, webSocketURLPath: String?, webSocketMaxFrameSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/connecttimeout","title":"let connectTimeout: TimeAmount","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/disableping","title":"let disablePing: Bool","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/keepaliveinterval","title":"let keepAliveInterval: TimeAmount","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/password","title":"let password: String?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/pinginterval","title":"let pingInterval: TimeAmount?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/sniservername","title":"let sniServerName: String?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/timeout","title":"let timeout: TimeAmount?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/tlsconfiguration","title":"let tlsConfiguration: TLSConfigurationType?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/usessl","title":"let useSSL: Bool","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/usewebsockets","title":"var useWebSockets: Bool","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/username","title":"let userName: String?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/version","title":"let version: Version","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/websocketconfiguration","title":"let webSocketConfiguration: WebSocketConfiguration?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/websocketmaxframesize","title":"var webSocketMaxFrameSize: Int","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct\/websocketurlpath","title":"var webSocketURLPath: String?","type":"property"}],"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.struct","title":"MQTTClient.Configuration","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/configuration-swift.property","title":"let configuration: Configuration","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/identifier","title":"var identifier: String","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/host","title":"let host: String","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/port","title":"let port: Int","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/eventloopgroup","title":"let eventLoopGroup: EventLoopGroup","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/logger","title":"var logger: Logger","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.property","title":"var v5: V5","type":"property"},{"children":[{"title":"Connection","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/connect(cleanstart:properties:will:authworkflow:)-9o7nr","title":"func connect(cleanStart: Bool, properties: MQTTProperties, will: (topicName: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool, properties: MQTTProperties)?, authWorkflow: ((MQTTAuthV5, EventLoop) -> EventLoopFuture<MQTTAuthV5>)?) -> EventLoopFuture<MQTTConnackV5>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/connect(cleanstart:properties:will:authworkflow:)-8fbfg","title":"func connect(cleanStart: Bool, properties: MQTTProperties, will: (topicName: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool, properties: MQTTProperties)?, authWorkflow: ((MQTTAuthV5, EventLoop) -> EventLoopFuture<MQTTAuthV5>)?) async throws -> MQTTConnackV5","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/disconnect(properties:)-321k","title":"func disconnect(properties: MQTTProperties) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/disconnect(properties:)-6x8ku","title":"func disconnect(properties: MQTTProperties) async throws","type":"method"},{"title":"Publish","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/publish(to:payload:qos:retain:properties:)-859ab","title":"func publish(to: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool, properties: MQTTProperties) -> EventLoopFuture<MQTTAckV5?>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/publish(to:payload:qos:retain:properties:)-1dhge","title":"func publish(to: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool, properties: MQTTProperties) async throws -> MQTTAckV5?","type":"method"},{"title":"Subscriptions","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/subscribe(to:properties:)-x043","title":"func subscribe(to: [MQTTSubscribeInfoV5], properties: MQTTProperties) -> EventLoopFuture<MQTTSubackV5>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/subscribe(to:properties:)-4nenw","title":"func subscribe(to: [MQTTSubscribeInfoV5], properties: MQTTProperties) async throws -> MQTTSubackV5","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/unsubscribe(from:properties:)-43of5","title":"func unsubscribe(from: [String], properties: MQTTProperties) -> EventLoopFuture<MQTTSubackV5>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/unsubscribe(from:properties:)-3chfg","title":"func unsubscribe(from: [String], properties: MQTTProperties) async throws -> MQTTSubackV5","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/createpublishlistener(subscriptionid:)","title":"func createPublishListener(subscriptionId: UInt) -> MQTTPublishIdListener","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/addpublishlistener(named:subscriptionid:_:)","title":"func addPublishListener(named: String, subscriptionId: UInt, (MQTTPublishInfo) -> Void)","type":"method"},{"title":"Authentication","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/auth(properties:authworkflow:)-5vif3","title":"func auth(properties: MQTTProperties, authWorkflow: ((MQTTAuthV5, EventLoop) -> EventLoopFuture<MQTTAuthV5>)?) -> EventLoopFuture<MQTTAuthV5>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/auth(properties:authworkflow:)-64uim","title":"func auth(properties: MQTTProperties, authWorkflow: ((MQTTAuthV5, EventLoop) -> EventLoopFuture<MQTTAuthV5>)?) async throws -> MQTTAuthV5","type":"method"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/connect(cleanstart:properties:will:authworkflow:connectconfiguration:)-25dca","title":"func connect(cleanStart: Bool, properties: MQTTProperties, will: (topicName: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool, properties: MQTTProperties)?, authWorkflow: ((MQTTAuthV5, EventLoop) -> EventLoopFuture<MQTTAuthV5>)?, connectConfiguration: MQTTClient.ConnectConfiguration) async throws -> MQTTConnackV5","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct\/connect(cleanstart:properties:will:authworkflow:connectconfiguration:)-7dzvs","title":"func connect(cleanStart: Bool, properties: MQTTProperties, will: (topicName: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool, properties: MQTTProperties)?, authWorkflow: ((MQTTAuthV5, EventLoop) -> EventLoopFuture<MQTTAuthV5>)?, connectConfiguration: ConnectConfiguration) -> EventLoopFuture<MQTTConnackV5>","type":"method"}],"path":"\/documentation\/mqttnio\/mqttclient\/v5-swift.struct","title":"MQTTClient.V5","type":"struct"},{"title":"Shutdown","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/shutdown(queue:)","title":"func shutdown(queue: DispatchQueue) async throws","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/shutdown(queue:_:)","title":"func shutdown(queue: DispatchQueue, (Error?) -> Void)","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/syncshutdowngracefully()","title":"func syncShutdownGracefully() throws","type":"method"},{"title":"Connection","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/connect(cleansession:will:)-242j6","title":"func connect(cleanSession: Bool, will: (topicName: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool)?) async throws -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/connect(cleansession:will:)-51e4w","title":"func connect(cleanSession: Bool, will: (topicName: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool)?) -> EventLoopFuture<Bool>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/isactive()","title":"func isActive() -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/disconnect()-8tgrs","title":"func disconnect() async throws","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/disconnect()-45iy6","title":"func disconnect() -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/ping()-8mctk","title":"func ping() async throws","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/ping()-3m8i5","title":"func ping() -> EventLoopFuture<Void>","type":"method"},{"title":"Publish","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/publish(to:payload:qos:retain:)","title":"func publish(to: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool) async throws","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/publish(to:payload:qos:retain:properties:)","title":"func publish(to: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool, properties: MQTTProperties) -> EventLoopFuture<Void>","type":"method"},{"title":"Subscriptions","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/subscribe(to:)-2ibiy","title":"func subscribe(to: [MQTTSubscribeInfo]) async throws -> MQTTSuback","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/subscribe(to:)-1y95e","title":"func subscribe(to: [MQTTSubscribeInfo]) -> EventLoopFuture<MQTTSuback>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/unsubscribe(from:)-48i9t","title":"func unsubscribe(from: [String]) async throws","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/unsubscribe(from:)-1wjnz","title":"func unsubscribe(from: [String]) -> EventLoopFuture<Void>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/createpublishlistener()","title":"func createPublishListener() -> MQTTPublishListener","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/addpublishlistener(named:_:)","title":"func addPublishListener(named: String, (Result<MQTTPublishInfo, Swift.Error>) -> Void)","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/removepublishlistener(named:)","title":"func removePublishListener(named: String)","type":"method"},{"title":"Listeners","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/addcloselistener(named:_:)","title":"func addCloseListener(named: String, (Result<Void, Swift.Error>) -> Void)","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/addshutdownlistener(named:_:)","title":"func addShutdownListener(named: String, (Result<Void, Swift.Error>) -> Void)","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/removecloselistener(named:)","title":"func removeCloseListener(named: String)","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/removeshutdownlistener(named:)","title":"func removeShutdownListener(named: String)","type":"method"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/connectconfiguration\/init(keepaliveinterval:username:password:)","title":"init(keepAliveInterval: TimeAmount?, userName: String?, password: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/connectconfiguration\/keepaliveinterval","title":"let keepAliveInterval: TimeAmount?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/connectconfiguration\/password","title":"let password: String?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/connectconfiguration\/username","title":"let userName: String?","type":"property"}],"path":"\/documentation\/mqttnio\/mqttclient\/connectconfiguration","title":"MQTTClient.ConnectConfiguration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/websocketconfiguration\/init(urlpath:maxframesize:initialrequestheaders:)","title":"init(urlPath: String, maxFrameSize: Int, initialRequestHeaders: HTTPHeaders)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/websocketconfiguration\/initialrequestheaders","title":"let initialRequestHeaders: HTTPHeaders","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/websocketconfiguration\/maxframesize","title":"let maxFrameSize: Int","type":"property"},{"path":"\/documentation\/mqttnio\/mqttclient\/websocketconfiguration\/urlpath","title":"let urlPath: String","type":"property"}],"path":"\/documentation\/mqttnio\/mqttclient\/websocketconfiguration","title":"MQTTClient.WebSocketConfiguration","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/init(unixsocketpath:identifier:eventloopgroupprovider:logger:configuration:)","title":"init(unixSocketPath: String, identifier: String, eventLoopGroupProvider: NIOEventLoopGroupProvider, logger: Logger?, configuration: Configuration)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/connect(cleansession:will:connectconfiguration:)-3ebau","title":"func connect(cleanSession: Bool, will: (topicName: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool)?, connectConfiguration: ConnectConfiguration) async throws -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttclient\/connect(cleansession:will:connectconfiguration:)-6v7o4","title":"func connect(cleanSession: Bool, will: (topicName: String, payload: ByteBuffer, qos: MQTTQoS, retain: Bool)?, connectConfiguration: ConnectConfiguration) -> EventLoopFuture<Bool>","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/tlsconfigurationtype\/niossl(_:)","title":"case niossl(TLSConfiguration)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttclient\/tlsconfigurationtype\/ts(_:)","title":"case ts(TSTLSConfiguration)","type":"case"}],"path":"\/documentation\/mqttnio\/mqttclient\/tlsconfigurationtype","title":"MQTTClient.TLSConfigurationType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/version\/v3_1_1","title":"case v3_1_1","type":"case"},{"path":"\/documentation\/mqttnio\/mqttclient\/version\/v5_0","title":"case v5_0","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttclient\/version\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqttclient\/version\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttclient\/version","title":"MQTTClient.Version","type":"enum"}],"path":"\/documentation\/mqttnio\/mqttclient","title":"MQTTClient","type":"class"},{"title":"Subscribe\/Publish","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfo\/init(topicfilter:qos:)","title":"init(topicFilter: String, qos: MQTTQoS)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfo\/qos","title":"let qos: MQTTQoS","type":"property"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfo\/topicfilter","title":"let topicFilter: String","type":"property"}],"path":"\/documentation\/mqttnio\/mqttsubscribeinfo","title":"MQTTSubscribeInfo","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncodes","title":"let returnCodes: [ReturnCode]","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/failure","title":"case failure","type":"case"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/grantedqos0","title":"case grantedQoS0","type":"case"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/grantedqos1","title":"case grantedQoS1","type":"case"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/grantedqos2","title":"case grantedQoS2","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/init(rawvalue:)","title":"init?(rawValue: UInt8)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/mqttnio\/mqttsuback\/returncode\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttsuback\/returncode","title":"MQTTSuback.ReturnCode","type":"enum"}],"path":"\/documentation\/mqttnio\/mqttsuback","title":"MQTTSuback","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpublishinfo\/init(qos:retain:dup:topicname:payload:properties:)","title":"init(qos: MQTTQoS, retain: Bool, dup: Bool, topicName: String, payload: ByteBuffer, properties: MQTTProperties)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpublishinfo\/dup","title":"let dup: Bool","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpublishinfo\/payload","title":"let payload: ByteBuffer","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpublishinfo\/properties","title":"let properties: MQTTProperties","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpublishinfo\/qos","title":"let qos: MQTTQoS","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpublishinfo\/retain","title":"let retain: Bool","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpublishinfo\/topicname","title":"let topicName: String","type":"property"}],"path":"\/documentation\/mqttnio\/mqttpublishinfo","title":"MQTTPublishInfo","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncStream<Element>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/asynciterator","title":"MQTTPublishListener.AsyncIterator","type":"typealias"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/element","title":"MQTTPublishListener.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/compactmap(_:)-5zk71","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/compactmap(_:)-8bufy","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/flatmap(_:)-3yqre","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/flatmap(_:)-8814","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/map(_:)-1u8nt","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/map(_:)-2p8wn","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishlistener\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/mqttnio\/mqttpublishlistener\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttpublishlistener","title":"MQTTPublishListener","type":"class"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttqos\/atleastonce","title":"case atLeastOnce","type":"case"},{"path":"\/documentation\/mqttnio\/mqttqos\/atmostonce","title":"case atMostOnce","type":"case"},{"path":"\/documentation\/mqttnio\/mqttqos\/exactlyonce","title":"case exactlyOnce","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttqos\/init(rawvalue:)","title":"init?(rawValue: UInt8)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttqos\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqttqos\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttqos\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttqos\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/mqttnio\/mqttqos\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttqos","title":"MQTTQoS","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/auth","title":"case AUTH","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/connack","title":"case CONNACK","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/connect","title":"case CONNECT","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/disconnect","title":"case DISCONNECT","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/pingreq","title":"case PINGREQ","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/pingresp","title":"case PINGRESP","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/puback","title":"case PUBACK","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/pubcomp","title":"case PUBCOMP","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/publish","title":"case PUBLISH","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/pubrec","title":"case PUBREC","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/pubrel","title":"case PUBREL","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/suback","title":"case SUBACK","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/subscribe","title":"case SUBSCRIBE","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/unsuback","title":"case UNSUBACK","type":"case"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/unsubscribe","title":"case UNSUBSCRIBE","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/init(rawvalue:)","title":"init?(rawValue: UInt8)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqttpackettype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpackettype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/mqttnio\/mqttpackettype\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttpackettype","title":"MQTTPacketType","type":"enum"},{"title":"Errors","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqtterror\/alreadyconnected","title":"case alreadyConnected","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/alreadyshutdown","title":"case alreadyShutdown","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/authworkflowrequired","title":"case authWorkflowRequired","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/badresponse","title":"case badResponse","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionerror(_:)","title":"case connectionError(ConnectionReturnValue)","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/decodeerror","title":"case decodeError","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/failedtoconnect","title":"case failedToConnect","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/noconnection","title":"case noConnection","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/reasonerror(_:)","title":"case reasonError(MQTTReasonCode)","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/retrysend","title":"case retrySend","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/serverclosedconnection","title":"case serverClosedConnection","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/serverdisconnection(_:)","title":"case serverDisconnection(MQTTAckV5)","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/timeout","title":"case timeout","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/unexpectedmessage","title":"case unexpectedMessage","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/unrecognisedpackettype","title":"case unrecognisedPacketType","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/websocketupgradefailed","title":"case websocketUpgradeFailed","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/wrongtlsconfig","title":"case wrongTLSConfig","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/accepted","title":"case accepted","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/badusernameorpassword","title":"case badUserNameOrPassword","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/identifierrejected","title":"case identifierRejected","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/notauthorized","title":"case notAuthorized","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/serverunavailable","title":"case serverUnavailable","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/unacceptableprotocolversion","title":"case unacceptableProtocolVersion","type":"case"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/unrecognizedreturnvalue","title":"case unrecognizedReturnValue","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/init(rawvalue:)","title":"init?(rawValue: UInt8)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqtterror\/connectionreturnvalue","title":"MQTTError.ConnectionReturnValue","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqtterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/mqttnio\/mqtterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqtterror","title":"MQTTError","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/atleastonetopicrequired","title":"static var atLeastOneTopicRequired: MQTTPacketError","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/badparameter","title":"static var badParameter: MQTTPacketError","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/invalidtopicname","title":"static var invalidTopicName: MQTTPacketError","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/publishincludessubscription","title":"static var publishIncludesSubscription: MQTTPacketError","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/qosinvalid","title":"static var qosInvalid: MQTTPacketError","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/retainunavailable","title":"static var retainUnavailable: MQTTPacketError","type":"property"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/topicaliasoutofrange","title":"static var topicAliasOutOfRange: MQTTPacketError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqttpacketerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpacketerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/mqttnio\/mqttpacketerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttpacketerror","title":"MQTTPacketError","type":"struct"},{"title":"V5 Connection","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttconnackv5\/properties","title":"let properties: MQTTProperties","type":"property"},{"path":"\/documentation\/mqttnio\/mqttconnackv5\/reason","title":"let reason: MQTTReasonCode","type":"property"},{"path":"\/documentation\/mqttnio\/mqttconnackv5\/sessionpresent","title":"let sessionPresent: Bool","type":"property"}],"path":"\/documentation\/mqttnio\/mqttconnackv5","title":"MQTTConnackV5","type":"struct"},{"title":"V5 Subscribe\/Publish","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/init(topicfilter:qos:nolocal:retainaspublished:retainhandling:)","title":"init(topicFilter: String, qos: MQTTQoS, noLocal: Bool, retainAsPublished: Bool, retainHandling: RetainHandling)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/nolocal","title":"let noLocal: Bool","type":"property"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/qos","title":"let qos: MQTTQoS","type":"property"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainaspublished","title":"let retainAsPublished: Bool","type":"property"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.property","title":"let retainHandling: RetainHandling","type":"property"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/topicfilter","title":"let topicFilter: String","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/donotsend","title":"case doNotSend","type":"case"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/sendalways","title":"case sendAlways","type":"case"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/sendifnew","title":"case sendIfNew","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/init(rawvalue:)","title":"init?(rawValue: UInt8)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5\/retainhandling-swift.enum","title":"MQTTSubscribeInfoV5.RetainHandling","type":"enum"}],"path":"\/documentation\/mqttnio\/mqttsubscribeinfov5","title":"MQTTSubscribeInfoV5","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/init()","title":"init()","type":"init"},{"path":"\/documentation\/mqttnio\/mqttproperties\/init(_:)","title":"init([Property])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/append(_:)","title":"func append(Property)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/assignedclientidentifier(_:)","title":"case assignedClientIdentifier(String)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/authenticationdata(_:)","title":"case authenticationData(ByteBuffer)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/authenticationmethod(_:)","title":"case authenticationMethod(String)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/contenttype(_:)","title":"case contentType(String)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/correlationdata(_:)","title":"case correlationData(ByteBuffer)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/maximumpacketsize(_:)","title":"case maximumPacketSize(UInt32)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/maximumqos(_:)","title":"case maximumQoS(MQTTQoS)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/messageexpiry(_:)","title":"case messageExpiry(UInt32)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/payloadformat(_:)","title":"case payloadFormat(UInt8)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/reasonstring(_:)","title":"case reasonString(String)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/receivemaximum(_:)","title":"case receiveMaximum(UInt16)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/requestprobleminformation(_:)","title":"case requestProblemInformation(UInt8)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/requestresponseinformation(_:)","title":"case requestResponseInformation(UInt8)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/responseinformation(_:)","title":"case responseInformation(String)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/responsetopic(_:)","title":"case responseTopic(String)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/retainavailable(_:)","title":"case retainAvailable(UInt8)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/serverkeepalive(_:)","title":"case serverKeepAlive(UInt16)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/serverreference(_:)","title":"case serverReference(String)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/sessionexpiryinterval(_:)","title":"case sessionExpiryInterval(UInt32)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/sharedsubscriptionavailable(_:)","title":"case sharedSubscriptionAvailable(UInt8)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/subscriptionidentifier(_:)","title":"case subscriptionIdentifier(UInt)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/subscriptionidentifieravailable(_:)","title":"case subscriptionIdentifierAvailable(UInt8)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/topicalias(_:)","title":"case topicAlias(UInt16)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/topicaliasmaximum(_:)","title":"case topicAliasMaximum(UInt16)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/userproperty(_:_:)","title":"case userProperty(String, String)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/wildcardsubscriptionavailable(_:)","title":"case wildcardSubscriptionAvailable(UInt8)","type":"case"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/willdelayinterval(_:)","title":"case willDelayInterval(UInt32)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/property\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqttproperties\/property\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttproperties\/property","title":"MQTTProperties.Property","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/mqttnio\/mqttproperties\/endindex","title":"var endIndex: Index","type":"property"},{"path":"\/documentation\/mqttnio\/mqttproperties\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/mqttnio\/mqttproperties\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/mqttnio\/mqttproperties\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/mqttnio\/mqttproperties\/startindex","title":"var startIndex: Index","type":"property"},{"path":"\/documentation\/mqttnio\/mqttproperties\/underestimatedcount-3v782","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/index(after:)","title":"func index(after: Index) -> Index","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/map(_:)-8kof5","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/subscript(_:)-118v1","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/mqttnio\/mqttproperties\/subscript(_:)-4focl","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/mqttnio\/mqttproperties\/subscript(_:)-4ztj8","title":"subscript(Index) -> Property","type":"subscript"},{"path":"\/documentation\/mqttnio\/mqttproperties\/subscript(_:)-68qe3","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/index","title":"MQTTProperties.Index","type":"typealias"}],"path":"\/documentation\/mqttnio\/mqttproperties\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/init(arrayliteral:)","title":"init(arrayLiteral: Property...)","type":"init"}],"path":"\/documentation\/mqttnio\/mqttproperties\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/mqttnio\/mqttproperties\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/mqttnio\/mqttproperties\/underestimatedcount-7t221","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttproperties\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/flatmap(_:)-7t3o2","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/flatmap(_:)-91hbg","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/map(_:)-48fq7","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/sorted(using:)-4k4a3","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/sorted(using:)-6f07e","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttproperties\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/mqttnio\/mqttproperties\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttproperties","title":"MQTTProperties","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/administrativeaction","title":"case administrativeAction","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/badauthenticationmethod","title":"case badAuthenticationMethod","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/badusernameorpassword","title":"case badUsernameOrPassword","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/banned","title":"case banned","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/clientidentifiernotvalid","title":"case clientIdentifierNotValid","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/connectionrateexceeeded","title":"case connectionRateExceeeded","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/continueauthentication","title":"case continueAuthentication","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/disconnectwithwill","title":"case disconnectWithWill","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/grantedqos1","title":"case grantedQoS1","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/grantedqos2","title":"case grantedQoS2","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/implementationspecificerror","title":"case implementationSpecificError","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/keepalivetimeout","title":"case keepAliveTimeout","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/malformedpacket","title":"case malformedPacket","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/maximumconnecttime","title":"case maximumConnectTime","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/messageratetoohigh","title":"case messageRateTooHigh","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/nomatchingsubscriber","title":"case noMatchingSubscriber","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/nosubscriptionexisted","title":"case noSubscriptionExisted","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/notauthorized","title":"case notAuthorized","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/packetidentifierinuse","title":"case packetIdentifierInUse","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/packetidentifiernotfound","title":"case packetIdentifierNotFound","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/packettoolarge","title":"case packetTooLarge","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/payloadformatinvalid","title":"case payloadFormatInvalid","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/protocolerror","title":"case protocolError","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/qosnotsupported","title":"case qosNotSupported","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/quotaexceeeded","title":"case quotaExceeeded","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/reauthenticate","title":"case reAuthenticate","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/receivemaximumexceeded","title":"case receiveMaximumExceeded","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/retainnotsupported","title":"case retainNotSupported","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/serverbusy","title":"case serverBusy","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/servermoved","title":"case serverMoved","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/servershuttingdown","title":"case serverShuttingDown","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/serverunavailable","title":"case serverUnavailable","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/sessiontakenover","title":"case sessionTakenOver","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/sharedsubscriptionsnotsupported","title":"case sharedSubscriptionsNotSupported","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/subscriptionidentifiersnotsupported","title":"case subscriptionIdentifiersNotSupported","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/success","title":"case success","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/topicaliasinvalid","title":"case topicAliasInvalid","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/topicfilterinvalid","title":"case topicFilterInvalid","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/topicnameinvalid","title":"case topicNameInvalid","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/unrecognisedreason","title":"case unrecognisedReason","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/unspecifiederror","title":"case unspecifiedError","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/unsupportedprotocolversion","title":"case unsupportedProtocolVersion","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/useanotherserver","title":"case useAnotherServer","type":"case"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/wildcardsubscriptionsnotsupported","title":"case wildcardSubscriptionsNotSupported","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/init(rawvalue:)","title":"init?(rawValue: UInt8)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/mqttreasoncode\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttreasoncode\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/mqttnio\/mqttreasoncode\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttreasoncode","title":"MQTTReasonCode","type":"enum"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttackv5\/properties","title":"let properties: MQTTProperties","type":"property"},{"path":"\/documentation\/mqttnio\/mqttackv5\/reason","title":"let reason: MQTTReasonCode","type":"property"}],"path":"\/documentation\/mqttnio\/mqttackv5","title":"MQTTAckV5","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttsubackv5\/properties","title":"let properties: MQTTProperties","type":"property"},{"path":"\/documentation\/mqttnio\/mqttsubackv5\/reasons","title":"let reasons: [MQTTReasonCode]","type":"property"}],"path":"\/documentation\/mqttnio\/mqttsubackv5","title":"MQTTSubackV5","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncStream<Element>.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/asynciterator","title":"MQTTPublishIdListener.AsyncIterator","type":"typealias"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/element","title":"MQTTPublishIdListener.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/compactmap(_:)-6z86h","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/compactmap(_:)-748qp","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/flatmap(_:)-4o1wz","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/flatmap(_:)-6nelf","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/map(_:)-10g0u","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/map(_:)-1n8hv","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/mqttnio\/mqttpublishidlistener\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/mqttpublishidlistener","title":"MQTTPublishIdListener","type":"class"},{"title":"V5 Authentication","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/mqttauthv5\/properties","title":"let properties: MQTTProperties","type":"property"},{"path":"\/documentation\/mqttnio\/mqttauthv5\/reason","title":"let reason: MQTTReasonCode","type":"property"}],"path":"\/documentation\/mqttnio\/mqttauthv5","title":"MQTTAuthV5","type":"struct"},{"title":"TLS","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/certificates\/certificates(_:)","title":"static func certificates([SecCertificate]) -> TSTLSConfiguration.Certificates","type":"method"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/certificates\/der(_:)","title":"static func der(String) throws -> TSTLSConfiguration.Certificates","type":"method"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/certificates\/pem(_:)","title":"static func pem(String) throws -> TSTLSConfiguration.Certificates","type":"method"}],"path":"\/documentation\/mqttnio\/tstlsconfiguration\/certificates","title":"TSTLSConfiguration.Certificates","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/identity\/p12(filename:password:)","title":"static func p12(filename: String, password: String) throws -> TSTLSConfiguration.Identity","type":"method"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/identity\/secidentity(_:)","title":"static func secIdentity(SecIdentity) -> TSTLSConfiguration.Identity","type":"method"}],"path":"\/documentation\/mqttnio\/tstlsconfiguration\/identity","title":"TSTLSConfiguration.Identity","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/init(minimumtlsversion:maximumtlsversion:trustroots:clientidentity:applicationprotocols:certificateverification:)-1u058","title":"init(minimumTLSVersion: tls_protocol_version_t, maximumTLSVersion: tls_protocol_version_t?, trustRoots: Certificates, clientIdentity: Identity, applicationProtocols: [String], certificateVerification: TSCertificateVerification)","type":"init"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/init(minimumtlsversion:maximumtlsversion:trustroots:clientidentity:applicationprotocols:certificateverification:)-4x7oi","title":"init(minimumTLSVersion: TSTLSVersion, maximumTLSVersion: TSTLSVersion?, trustRoots: Certificates, clientIdentity: Identity, applicationProtocols: [String], certificateVerification: TSCertificateVerification)","type":"init"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/init(minimumtlsversion:maximumtlsversion:trustroots:clientidentity:applicationprotocols:certificateverification:)-5doeg","title":"init(minimumTLSVersion: TSTLSVersion, maximumTLSVersion: TSTLSVersion?, trustRoots: [SecCertificate]?, clientIdentity: SecIdentity?, applicationProtocols: [String], certificateVerification: TSCertificateVerification)","type":"init"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/init(minimumtlsversion:maximumtlsversion:trustroots:clientidentity:applicationprotocols:certificateverification:)-7djbw","title":"init(minimumTLSVersion: tls_protocol_version_t, maximumTLSVersion: tls_protocol_version_t?, trustRoots: [SecCertificate]?, clientIdentity: SecIdentity?, applicationProtocols: [String], certificateVerification: TSCertificateVerification)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/applicationprotocols","title":"var applicationProtocols: [String]","type":"property"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/certificateverification","title":"var certificateVerification: TSCertificateVerification","type":"property"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/clientidentity","title":"var clientIdentity: SecIdentity?","type":"property"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/maximumtlsversion","title":"var maximumTLSVersion: TSTLSVersion?","type":"property"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/minimumtlsversion","title":"var minimumTLSVersion: TSTLSVersion","type":"property"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/trustroots","title":"var trustRoots: [SecCertificate]?","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/error\/invaliddata","title":"case invalidData","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/error\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/tstlsconfiguration\/error\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsconfiguration\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/mqttnio\/tstlsconfiguration\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/tstlsconfiguration\/error","title":"TSTLSConfiguration.Error","type":"enum"}],"path":"\/documentation\/mqttnio\/tstlsconfiguration","title":"TSTLSConfiguration","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsversion\/tlsv10","title":"case tlsV10","type":"case"},{"path":"\/documentation\/mqttnio\/tstlsversion\/tlsv11","title":"case tlsV11","type":"case"},{"path":"\/documentation\/mqttnio\/tstlsversion\/tlsv12","title":"case tlsV12","type":"case"},{"path":"\/documentation\/mqttnio\/tstlsversion\/tlsv13","title":"case tlsV13","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tstlsversion\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/tstlsversion\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/tstlsversion","title":"TSTLSVersion","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tscertificateverification\/fullverification","title":"case fullVerification","type":"case"},{"path":"\/documentation\/mqttnio\/tscertificateverification\/none","title":"case none","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/mqttnio\/tscertificateverification\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/mqttnio\/tscertificateverification\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/mqttnio\/tscertificateverification","title":"TSCertificateVerification","type":"enum"}],"path":"\/documentation\/mqttnio","title":"MQTTNIO","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}